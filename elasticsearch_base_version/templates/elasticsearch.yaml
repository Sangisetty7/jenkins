apiVersion: elasticsearch.k8s.elastic.co/v1
kind: Elasticsearch
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  image: {{ .Values.image }}
  auth: {}
  http:
    service:
      metadata:
{{- if .Values.service.metadata.annotations }}
        annotations:
{{ toYaml .Values.service.metadata.annotations | indent 10 }}
{{- end }}
      spec:
        ports:
        - name: https
          port: {{ .Values.service.spec.port }}
          protocol: TCP
          targetPort: 9200
{{- if .Values.service.spec.type }}
        type: {{ .Values.service.spec.type }}
{{- end }}
{{- if .Values.service.spec.loadBalancerIP }}
        loadBalancerIP: {{ .Values.service.spec.loadBalancerIP }}
{{- end }}
{{- if  .Values.tls.enabled }}
    tls:
      certificate:
        secretName: {{ .Values.tls.secretName }}
{{- end }}
  nodeSets:
  - config:
      node.data: false
      node.ingest: false
      node.master: true
      node.remote_cluster_client: {{ .Values.node_remote_cluster_client }}
    count: {{ .Values.master.count }}
    name: master
    podTemplate:
      metadata: {}
      spec:
        imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}
        containers:
        - name: elasticsearch
          resources:
            limits:
              cpu: {{ .Values.master.resources.limits.cpu }}
              memory: {{ .Values.master.resources.limits.memory }}
            requests:
              cpu: {{ .Values.master.resources.requests.cpu }}
              memory: {{ .Values.master.resources.requests.memory }}
          securityContext:
            runAsGroup: {{ .Values.securityContext.runAsGroup }}
            runAsUser: {{ .Values.securityContext.runAsUser }}
          volumeMounts:
{{- if .Values.log4j.enabled }}
          - mountPath: /usr/share/elasticsearch/config/log4j2.properties
            subPath: log4j2.properties
            name: log4j
{{- end }}
{{- if .Values.pvc.enabled }}
          - mountPath: /usr/share/elasticsearch/logs
            name: logs-backup
{{- end }}

        initContainers:
        - name: elastic-internal-init-filesystem
          securityContext:
            privileged: true
            runAsUser: {{ .Values.securityContext.runAsUser }}
        - name: sysctl
          command:
          - sh
          - -c
          - sysctl -w vm.max_map_count=262144
          resources: {}
          securityContext:
            privileged: true
        volumes:
{{- if .Values.log4j.enabled }}
        - name: log4j
          configMap:
            name: log4j
{{- end }}
{{- if .Values.pvc.enabled }}
        - name: logs-backup
          persistentVolumeClaim:
            claimName: {{ .Values.pvc.name }}
{{- end }}
    volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.master.volumeClaimTemplates.resources.requests.storage }}
        storageClassName: {{ .Values.master.volumeClaimTemplates.storageClassName }}
      status: {}
  - config:
      node.data: true
      node.ingest: true
      node.master: false
    count: {{ .Values.data.count }}
    name: ingest-data
    podTemplate:
      metadata:
        creationTimestamp: null
      spec:
        imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    elasticsearch.k8s.elastic.co/cluster-name: {{ .Release.Name }}
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - name: elasticsearch
          resources:
            limits:
              cpu: {{ .Values.data.resources.limits.cpu }}
              memory: {{ .Values.data.resources.limits.memory }}
            requests:
              cpu: {{ .Values.data.resources.requests.cpu }}
              memory: {{ .Values.data.resources.requests.memory }}
          securityContext:
            runAsGroup: {{ .Values.securityContext.runAsGroup }}
            runAsUser: {{ .Values.securityContext.runAsUser }}
          volumeMounts:
{{- if .Values.log4j.enabled }}
          - mountPath: /usr/share/elasticsearch/config/log4j2.properties
            subPath: log4j2.properties
            name: log4j
{{- end }}
{{- if .Values.pvc.enabled }}
          - mountPath: /usr/share/elasticsearch/logs
            name: logs-backup
{{- end }}

        initContainers:
{{- if .Values.initContainers.cloud.enabled }}
        - name: fixmount
          command: [ 'sh', '-c', 'chown -R 1000:1000 /usr/share/elasticsearch/data' ]
          image: busybox
{{- end }}
        - name: elastic-internal-init-filesystem
          securityContext:
            privileged: true
            runAsUser: {{ .Values.securityContext.runAsUser }}
        - name: sysctl
          command:
          - sh
          - -c
          - sysctl -w vm.max_map_count=262144
          resources: {}
          securityContext:
            privileged: true
        volumes:
{{- if .Values.log4j.enabled }}
        - name: log4j
          configMap:
            name: log4j
{{- end }}
{{- if .Values.pvc.enabled }}
        - name: logs-backup
          persistentVolumeClaim:
            claimName: {{ .Values.pvc.name }}
{{- end }}
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: elasticsearch-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.data.volumeClaimTemplates.resources.requests.storage }}
        storageClassName: {{ .Values.data.volumeClaimTemplates.storageClassName }}
  transport:
    service:
      metadata:
        creationTimestamp: null
      spec: {}
  updateStrategy:
    changeBudget: {}
  version: {{ .Values.version }}
